{"ast":null,"code":"// import { createContext, useState } from \"react\"\n// import { getItemData, itemsArray } from \"./MenuItems\"\n\n// export const CartContext = createContext({\n//     items: [],\n//     getProductQuantity: () => {},\n//     addOneToCart: () => {},\n//     removeOneFromCart: () => {},\n//     deleteFromCart: () => {},\n//     getTotalPrice: () => {},\n// })\n\n// export function CartProvider({ children }) {\n\n//     const [cartProducts, setCartProducts] = useState([])\n\n//     function getProductQuantity(id) {\n//         const quantity = cartProducts.find(product => product.id === id)?.quantity\n\n//         if (quantity === undefined) {\n//             return 0\n//         } \n\n//         return quantity;\n//     }\n\n//     function addOneToCart(id) {\n//         const quantity = getProductQuantity(id)\n\n//         if (quantity === 0) { //product not in cart\n//             setCartProducts(\n//                 [\n//                     ...cartProducts,\n//                     {\n//                         id: id,\n//                         quantity: 1,\n//                     }\n//                 ]\n//             )\n//         } else { //product is in cart\n//             setCartProducts(\n//                 cartProducts.map(\n//                     product =>\n//                     product.id === id\n//                     ? { ...product, quantity: product.quantity + 1 }\n//                     : product\n//                 )\n//             )\n//         }\n//     }\n\n//     function removeOneFromCart(id) {\n//         const quantity = getProductQuantity(id)\n\n//         if (quantity == 1) { //product is in cart and quantity is 1\n//             deleteFromCart(id)\n//         } else { //product is in cart and quantity is > 1\n//             setCartProducts(\n//                 cartProducts.map(\n//                     product =>\n//                     product.id === id\n//                     ? { ...product, quantity: product.quantity - 1 }\n//                     : product\n//                 )\n//             )\n//         }\n//     }\n\n//     function deleteFromCart(id) {\n//         setCartProducts(\n//             cartProducts =>\n//             cartProducts.filter(currentProduct => {\n//                 return currentProduct.id !== id\n//             })\n//         )\n//     }\n\n//     function getTotalPrice() {\n//         let totalPrice = 0\n//         cartProducts.map((cartItem) => {\n//             const productData = getProductData(cartItem.id)\n//             totalPrice += (productData.price * cartItem.quantity)\n//         })\n//         return totalPrice\n//     }\n\n//     const contextValue = {\n//         items: cartProducts,\n//         getProductQuantity,\n//         addOneToCart,\n//         removeOneFromCart,\n//         deleteFromCart,\n//         getTotalPrice,\n//     }\n\n//     return (\n//         <CartContext.Provider value={contextValue}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n\n// export default CartProvider","map":{"version":3,"names":[],"sources":["/Users/matthewkiska/Desktop/GA/projects/Snaxter-App/src/CartContext.js"],"sourcesContent":["// import { createContext, useState } from \"react\"\n// import { getItemData, itemsArray } from \"./MenuItems\"\n\n// export const CartContext = createContext({\n//     items: [],\n//     getProductQuantity: () => {},\n//     addOneToCart: () => {},\n//     removeOneFromCart: () => {},\n//     deleteFromCart: () => {},\n//     getTotalPrice: () => {},\n// })\n\n// export function CartProvider({ children }) {\n\n//     const [cartProducts, setCartProducts] = useState([])\n\n//     function getProductQuantity(id) {\n//         const quantity = cartProducts.find(product => product.id === id)?.quantity\n\n//         if (quantity === undefined) {\n//             return 0\n//         } \n\n//         return quantity;\n//     }\n\n//     function addOneToCart(id) {\n//         const quantity = getProductQuantity(id)\n\n//         if (quantity === 0) { //product not in cart\n//             setCartProducts(\n//                 [\n//                     ...cartProducts,\n//                     {\n//                         id: id,\n//                         quantity: 1,\n//                     }\n//                 ]\n//             )\n//         } else { //product is in cart\n//             setCartProducts(\n//                 cartProducts.map(\n//                     product =>\n//                     product.id === id\n//                     ? { ...product, quantity: product.quantity + 1 }\n//                     : product\n//                 )\n//             )\n//         }\n//     }\n\n//     function removeOneFromCart(id) {\n//         const quantity = getProductQuantity(id)\n\n//         if (quantity == 1) { //product is in cart and quantity is 1\n//             deleteFromCart(id)\n//         } else { //product is in cart and quantity is > 1\n//             setCartProducts(\n//                 cartProducts.map(\n//                     product =>\n//                     product.id === id\n//                     ? { ...product, quantity: product.quantity - 1 }\n//                     : product\n//                 )\n//             )\n//         }\n//     }\n\n\n//     function deleteFromCart(id) {\n//         setCartProducts(\n//             cartProducts =>\n//             cartProducts.filter(currentProduct => {\n//                 return currentProduct.id !== id\n//             })\n//         )\n//     }\n\n//     function getTotalPrice() {\n//         let totalPrice = 0\n//         cartProducts.map((cartItem) => {\n//             const productData = getProductData(cartItem.id)\n//             totalPrice += (productData.price * cartItem.quantity)\n//         })\n//         return totalPrice\n//     }\n\n//     const contextValue = {\n//         items: cartProducts,\n//         getProductQuantity,\n//         addOneToCart,\n//         removeOneFromCart,\n//         deleteFromCart,\n//         getTotalPrice,\n//     }\n\n//     return (\n//         <CartContext.Provider value={contextValue}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n\n// export default CartProvider"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}